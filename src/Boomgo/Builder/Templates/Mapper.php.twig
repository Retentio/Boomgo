<?php

namespace {{ namespace ~ ";" }}

{% for import in imports %}
use {{  import }};
{% endfor %}
use Boomgo\Mapper\BaseMapper,
    Boomgo\Mapper\MapperInterface;

/**
 * {{ map.getClassName }}Mapper
 *
 * Auto generated Mapper class for/by Boomgo
 * Do not edit this file
 *
 * @author  Boomgo\Generator\MapperGenerator
 */
{{ abstract is defined ? "abstract " : "" }}class {{ map.getClassName }}Mapper {{ extends is defined ? "extends " ~ extends : "" }} {{ implements is defined ? "implements " ~ implements : "" }}
{
    /**
     * Unserialize a MongoDB array to an object
     *
     * Return an hydrated object from a MongoDB array
     *
     * @param  array  $data MongoDB result array (a document)
     *
     * @return {{ map.class }}
     */
    public function unserialize(array $data)
    {
        $object = new {{ map.class }}();
        $this->hydrate($object, $data);

        return $object;
    }

    /**
     * Serialize an object to a MongoDB array
     *
     * Return an Mongo-able array from a Php object
     *
     * @param  {{ map.class }} $object
     *
     * @return array
     */
    public function serialize($object)
    {
        if (!$object instanceof {{ map.getClass }}) {
            throw new \InvalidArgumentException('Serialize expect an instance of "{{ map.getClass }}"');
        }

        $data = array();
        {% for definition in map.definitions %}

        $value = $object->{{ definition.accessor }}();
        if (null != $value && !empty($value)) {

        {%- if definition.isUserMapped %}

            $mapper = $this->mapperProvider->get('{{ definition.getMappedClass }}');

            {%- if definition.isDocumentMapped %}

            $data['{{ definition.key }}'] = $mapper->serialize($value);

            {%- elseif definition.isCollectionMapped %}

            $data['{{ definition.key }}'] = $this->serializeEmbeddedCollection($mapper, $value);

            {%- endif %}

        {%- elseif definition.isComposite %}

            $data['{{ definition.key }}'] = $this->normalize($value);

        {%- else %}

            $data['{{ definition.key }}'] = $value;

        {%- endif %}

        }
        {% endfor %}

        return $data;
    }

    /**
     * Hydrate an object from a MongoDb array
     *
     * @param  {{ map.getClass }} $object
     * @param  array $data MongoDB result array (a document)
     */
    public function hydrate($object, array $data)
    {
        if (!$object instanceof {{ map.getClass }}) {
            throw new \InvalidArgumentException('Serialize expect an instance of "{{ map.getClass }}"');
        }
        {% for definition in map.definitions %}

        if (isset($data['{{ definition.key }}'])) {

        {%- if definition.isUserMapped %}

            $mapper = $this->mapperProvider->get('{{ definition.getMappedClass }}');

            {%- if definition.isDocumentMapped %}

            $embeddedObject = $mapper->unserialize($data['{{ definition.key }}']);
            $object->{{ definition.mutator }}($embeddedObject);

            {%- elseif definition.isCollectionMapped %}

            $embeddedCollection = $this->unserializeEmbeddedCollection($mapper, $data['{{ definition.key }}']);
            $object->{{ definition.mutator }}($embeddedCollection);

            {%- endif %}

        {%- else %}

            $object->{{ definition.mutator }}($data['{{ definition.key }}']);

        {%- endif %}

        }
        {% endfor %}

    }
}